--Comparing local and remote files
git diff origin/ACOB-46:api/src/main/java/com/mutsys/dragonfly/api/resource/AbstractApiResource.java api/src/main/java/com/mutsys/dragonfly/api/resource/AbstractApiResource.java

--forcebly overwrite the local changes with git HEAD
git reset --hard HEAD  

--Selectively add files under a folder
git add projects/**

If .gitignore doesn't work then the fix is 
run "git rm -r --cached ."
then again check git status and accordingly add

git clean [-f]
Remove files that are not tracked.

git reset --hard [HEAD]
completely remove all staged and unstaged changes to tracked files.

git log --oneline
shows the SHA of all the checkins as one liners

git show <SHA>
shows all the new stuff added/modified in that specific check-in

git checkout HEAD -- <filename_with_extention>
discard changes to the specific file.

git push <remote-name> <branch-name>
Push changes to a specific branch

/*
to check the status of all the projects in one go

find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git status -s && echo)' \;
From the containing folder, execute this command and it will list the status of each repo in that folder.

How it works:

find . : to find everything in the current folder
-maxdepth 1 : so that it doesn't recurse into subdirs of the repos
-mindepth 1 : so that it skips the current directory (of depth 0)
-type d : only find directories
-exec sh -c : spawn a shell and give it a command
'(echo {} && cd {} && git status && echo)' : the command given to the shell
echo {} : echo the directory found by find
cd {} : cd into the directory found by find
git status -s : run the actual git status, with the -s (short) option
echo : echo an empty line, for readability
\; : semicolon to run shell for each of the found directories instead of passing them all to one shell as arguments

*/

clone from a branch - git clone -b <branch_name> <repo_name/url>
ex - git clone -b feature/MEM-537-cc-refresher-chase https://rekha@git.sparkred.com/scm/rhw/rhw-estore.git
