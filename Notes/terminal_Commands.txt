--Command to copy directories between VM and local Mac 
scp -r vagrant@10.0.0.43:/usr/local/atg/atg-11.2/ /Users/ac-rekharokkam/Documents/RH/ATG/

--Command to copy files between VM and local Mac 
scp -r vagrant@10.0.0.43:/usr/local/atg/atg-11.2/DAS/lib/classes.jar /Users/ac-rekharokkam/Documents/RH/ATG/DAS/lib/classes.jar

Book referred to on safaribooks - https://www.safaribooksonline.com/library/view/take-control-of/9781457191107/chap10.xhtml

To make sure bash is the shell just use bash from anywhere. For me this didn't work as I was not able to get any entries from .bash_profile when i did bash

Chapter - Log In to Another Computer
------------------------------------

TRANSFER FILES WITH SFTP OR SCP
-------------------------------

Although you can run any command-line program on a remote computer while logged in with SSH, 
one thing you can’t do in an SSH session is transfer files between your Mac and the remote computer. 

2 programs that can be used for file transfers between mac and other remote server are sftp and scp


SFTP
----

The command you use to access an SFTP server is sftp.

To open an SFTP connection, use this command: sftp username@host

In order for you to connect to your local sftp server - apple -> System Preferences -> Sharing -> Remote Login should be enabled.

/*

To open an SFTP connection, use this command:

sftp username@host

As usual, replace username with your username on the remote computer and host with that computer’s domain name or IP address. Enter your password for the remote computer when prompted, and then you’ll see a “Connected to” message followed by this prompt:

sftp>

From here, you can use many command-line navigation techniques you’re already familiar with, such as cd and pwd to browse the file system.

When you get to a directory containing a file you want to download to your local Mac, you can do it like this:

get filename

If you want to transfer an entire directory and its contents, add the -r (recursive) flag:

get -r directory_name

Either way, the item will be downloaded to whichever directory you were in on the command line when you ran the sftp command.

Note: If the file you want isn’t in the current directory but you know its exact path, you can use get /path/to/file. Similarly, if you want to store it somewhere else on your local Mac, 
you can add the destination path: get /path/to/remote_file /path/to/local_directory.

To upload a file, use the put command, which follows exactly the same pattern as get:

put /path/to/local_file /path/to/remote_directory

So, you can use just the filename if it’s in your current directory, or you can specify a file from somewhere else on your Mac by giving its complete path. If you leave out the destination directory, the file will be uploaded to your current directory on the remote computer.

When you’re done transferring files, you can leave sftp by entering exit.

*/

SCP
---
/*
The nice thing about sftp is that you can use it not only to transfer files but also to browse the remote file system. 
But if sftp isn’t available on the remote computer, you may have to resort to a different method: scp (secure copy).

Because scp uses SSH, it should work pretty much anywhere SSH does, even when sftp does not.
The downside, however, is that scp requires you to know the exact name and location of the file on the remote computer—you can’t browse with scp.
*/

For example, if my username on the computer mac.alt.cc is joe, the file I want to download is /Users/joe/Desktop/test.txt, 
and I want to store it on the Desktop of my local Mac, I would use:

scp joe@mac.alt.cc:/Users/joe/Desktop/test.txt ~/Desktop

To download an entire directory, add the -r (recursive) flag, like so:

scp -r joe@mac.alt.cc:/Users/joe/Documents/Folder ~/Desktop

If you want to upload a file to the remote computer, you can do it almost exactly the same way as downloading, but swap source and destination, like so:

scp ~/Desktop/test.txt joe@mac.alt.cc:/Users/joe/Desktop/

And, once again, use -r to upload a directory and all its contents:

scp -r ~/Documents/Folder joe@mac.alt.cc:/Users/joe/Desktop/

SSH
---
/*
You can ask the administrator of the remote computer, if there is one. But if the computer is one of your own (or you at least have physical access to it), 
you can determine its fingerprint with the following command, which you enter in Terminal on that Mac:

ssh-keygen -l -f <complete_path_to_the_Key>
Ex - ssh-keygen -l -f /private/etc/ssh_host_rsa_key.pub [finding the fingerprint of a machine], 
	ssh-keygen -l -f ~/.ssh/gitHub_id_rsa.pub [finding the fingerprint of a key]
*/

/*
But what if you’re logged in to another Mac via SSH? To restart it, just enter this:

reboot

*/

/*
Delete Stubborn Items from the Trash
sudo rm -ri ~/.Trash/*
*/


Chapter - Customize Your Profile
--------------------------------

HOW PROFILES WORK
------------------

/*
When you start a new shell session, bash first reads in the system-wide default profile settings, located at /etc/profile. 
Next, it checks if you have a personal profile. It first looks for a file called ~/.bash_profile, and if it finds one, it uses that. 
Otherwise, it moves on to look for ~/.bash_login and, finally, ~/.profile. Of these last three files, 
it loads only the first one it finds, so if you have a .bash_profile file, the others, if present, are ignored.
*/

Because .bash_profile is the first user-specific profile to be checked, that’s the one I suggest you use.

/*
Note: Customizations you make in .bash_profile (or any other profile file mentioned here) apply only in a shell session; 
they aren’t used by shell scripts (see Create Your Own Shell Script). As a result, when writing a script, 
you should always spell out complete paths and assume default values for all variables.
*/

EDIT .BASH_PROFILE
------------------

To load the modified profile [.bash_profile] immediately, enter source .bash_profile.

CREATE ALIASES
--------------

In the command-line environment, however, the word alias means a shortcut in which one command substitutes for another.

/*
To create an alias, put a new line in your .bash_profile consisting of the word alias, a space, the shortcut you want to use, and ="" 
with the command you want to run inside the quotation marks. For example, to use the command dt as a shortcut for the date command, enter this:

alias dt="date"
*/

MODIFY YOUR PATH
----------------

/*
You can add as many of these export statements as you need. 
You can also add multiple directories to your PATH in a single export statement by separating them with a colon, like so:

export PATH=$PATH:~/Documents/scripting:/Library/Scripts
*/

CHANGE YOUR PROMPT
------------------
/*
You can modify this by adding a line to your .bash_profile that begins with PS1= and ends with whatever you want your prompt to be. 
For example, if you enter this:

PS1="rrokkam-prompt "
*/

/*
Tip: Always enclose your prompt in quotation marks, and include a space before the closing quotation mark, 
to make sure you can easily see where the prompt ends and commands begin.
*/

/*
Prompts can include variables. Some common ones are these:

\u: Your short username
\h: Your computer’s name
\s: The name of the current shell
\w: The current directory
\d: The current date, in the format “Mon Feb 16”
\@: The current time, in 12-hour format with AM/PM
*/

Use Text-to-Speech from the Command Line
-----------------------------------------
This is mostly just for fun. To have your Mac speak text using the text-to-speech voice currently selected in 
System Preferences > Dictation & Speech (Speech in older versions of Mac OS X) > Text to Speech, enter the following:

say "Hello there"

View Your Mac’s Network Connections
-----------------------------------
Which servers and other network devices is your Mac currently connected to? For all the details (in fact, far more details than you probably want), try:

netstat