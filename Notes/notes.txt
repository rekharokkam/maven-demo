Maven's funda is convention over configuration

Our project is dependent on a library ex- spring framework. Spring framework might in turn be dependent on other libraries. this is called transitive dependencies
It is possible to mention dependency scoping
POM - Project Object Model

groupId, artifactId and version number together create an address for an artifact

repositories hold all of our artifacts and dependencies

dependencies are the library files that we are dependent on
artifacts are the libraries we have generated, archetypes, plugins

2 types of repositories - Local - on the machine , Remote - we access via some type of protocol
Local repo will take precedence over remote repo when we perform dependency resolution

what is a Plug-in - is a collection of goals

goals are the actions we perform / Methods /Operations on source code.

All the work done in maven is done through plugins and goals.

Maven has life cycle. A life cycle is just a named sequence of events

maven has 3 life cycles - clean, default and site
by far "default" life cycle is most widely used.

First command I ran was "mvn package"

when we run "mvn package" - we are executing maven "default" lifecycle and "package" phase. This phase will create a jar file that contains the contents of our project.
every phase that preceedes the current phase will be run by default
precceding phases - compile and test will be executed.

mvn site // Life cycle - site , phase - site

Base directory is always the folder that contains the pom file.

One pom file can be derived from another pom file. In child pom we can override some of the specifications mentioned in the parent pom.
Every pom inherits from a Super pom much like every class in java inherits from Object class.
How to access this super pom file - navigate to - /Users/ac-rekharokkam/Applications/apache-maven-3.5.0/lib/maven-model-builder-3.5.0.jar . Open the pom-4.0.0.xml file
Other way of accessing the same file is - child pom with super inherited pom - mvn help:effective-pom

Each pom can also inherit from another pom that we built.

When ever we have parent-child relationship first step is to run "mvn install" in the parent directory. what this does is, it will take the parent pom and put it in our local repository.

Maven profiles help us build projects for different environments. Customizing the build for an environment

Activator is a way to look at something like an environment variable see what its value is determine by that value what profile to run. If maven finds the value then it runs per what is 
provided inside the profile element.

Maven projects can be generated using the plug in provided by maven called archetype. They are like templates we can use to build our own project. "mvn archetype:generate".
mvn eclipse:eclipse - is the eclipse plugin that will provide eclipse directory structure. Kind of re-building eclipse structure.
Steps to manually generate is - 1) run "mvn archetype:generate 2) "mvn eclipse:eclipse 3) In eclipse import either maven project OR general existing project. 

search.maven.org - maven central repository to search all the jars/software available for download

dependencies
------------
Once any jar is added as dependent in pom.xml file then the jar is downloaded to - /Users/ac-rekharokkam/.m2/repository. If manually removed from this location then when we run 
"mvn dependency:copy-dependecies" it downloads to the .m2 location again and then to - /Users/ac-rekharokkam/Documents/Rekha/workspace/maven-demo/target location. 
the way dependencies work is - first download the dependencies to .m2 location and then copy to local target dependency folder. When mvn dependency plugin is run then maven checks for the jar
file of specified version in the .m2 location if found then copies the jar file to local target - dependency folder. When a dependency is mentioned in the pom file its only downloaded to .m2 directory
but not to project target directory on when specific goals are run it is copied.

Later notes for dependencies
----------------------------
if child project needs to inherit dependencies mentioned in the parent pom then run mvn dependency:copy-dependencies
Way I tested. Created a new archetype project - maven-test-inheritance and linked to maven-parent. Mentioned commons-lang3 file as dependency in parent pom but not in the child pom.
ran mvn install from the parent project. Then ran mvn dependency:copy-dependencies from child project and all the necessary jars were downloaded and had no issues with importing of classes.


Remote respositories
--------------------
Default repo can be checked by executing the file - mvn help:effective-pom
Additional remote repos can be added by editing the settings.xml at the path - /Users/ac-rekharokkam/Applications/apache-maven-3.5.0/conf/settings.xml.
For changes made refer to the comments <!-- Added by me to test remote repos - Starts here--> in the above file.

Scope
-----
Default scope of a dependency is "compile". "compile" scope is available during build, test and run phases of our project. way to test is mvn compile
Other scopes are - 
	import - normally not at all used
	provided - When the dependency should be provided the JDK or the container we are using. This is available for build and test BUT not for deploy as the container would be providing this.
		Ex - servlet-api jar file. This jar file is needed only for build and test BUT not for packaging as the container in which deployment happens will provide this jar file.
	runtime - this is available only during runtime. Ex- a JDBC provider jar, this jar is not needed for compiling but is needed only for running the app. Not used much. It doesn't hurt
	to add these jars to compile scope.
	system - teacher does not recommend this approach. If we have jars placed in the system file path, then this dependency helps get it. So the risk is if the file paths differ then
	this dependency becomes more rigid
	test - available only for test scope.
	
building - mvn compile, 
packaging - mvn package - jar/war/ear
testing - mvn test


conflict resolution
-------------------
refer to maven-manually-generated project and its dependency on 2 other projects - maven-conflict-example and maven-conflict-example2. Both the conflict projects use - commons-lang3 jar file. 
example2 uses version 3.0 and example uses 3.3.2. Maven is smart to pick the latest 3.3.2. If this is not the desired behavior if the intent is to pick lower version then it needs to be 
mentioned in the pom file. refer to maven-manually-generated pom file.

Lifecycle
---------
Lifecycle consists of a set of stages / steps / phases as we build our artifact. There are 3 inbuilt lifecycles - default, clean and site. Each Lifecycle has its own phases.
A goal will bind be bound to a lifecycle specific phase. a goal can be thought of as a method on a class.
mvn clean - clean phase of clean lifecycle. Use help plugin to learn a little more about this phase. 
mvn help:describe -Dcmd=clean -Ddetail
mvn help:describe -Dcmd=deploy -Ddetail

argument -Dcmd is only for phases

multiple plugins / goals can be used at the same time - mvn clean install

Lifecycle Phases
----------------
default lifecycle has 23 phases.It is the default lifecycle that will be used the most. All phases below are from default lifecycle. 

Compile - 
compiles the source code within our src/main/java directory.

Test-compile - 
compiles the tests found under src/test/java directory. This cannot be executed on its own.

Test -
Runs unit tests using a suitable framework. These tests should not require the code to be deployed or packaged. By default maven will stop if any of the builds fail. 
But it can be configured to skip the tests. 

Package - 
Take the compiled code and package it in the desired format such as jar, war


Install - 
Takes the package built and installs it in the local repo. 
Any jar file in the dependency section of pom file gets downloaded to .m2 directory. But "_remote.repositories" file is not generated. "_remote.repositories" file helps maven to decide 
how to link to the dependent pom file for local dependencies.
"mvn install" in the project which provides the dependency should be run. this goal creates the "_remote.repositories" file.
Ex - "mvn install" should be run in both the projects - maven-conflict-example and maven-conflict-example2 for dependencies to be resolved for the project maven-manually-generated.

This phase allows other projects to be dependent on this project.

Deploy -
This pushes our artifact to remote repository like maven central or company specific repo for sharing with other developers and projects.


GOals and PLUGins
-----------------
Goals 	perform tasks. These tasks are run against our project for something to happen. Goals can be compared methods in a class.
Plugin comprises of a bunch of Goals. Plugin is analogous to a class which represents a collection of methods.
syntax to execute a goal on a plugin is - mvn <plugin>:<goal> Ex - mvn compiler:compile.
where these plugins come from - super pom - mvn help:effective-pom

To get more details on the plugin - mvn help:describe -Dplugin=compiler
-Dplugin - this argument is for plugins
Get more help on the compiler goal - mvn compiler:help -Ddetail=true -Dgoal=compile 

mvn help:describe -Dcmd=compiler:compile -Ddetail=true - to get more detailed information on the goal.

To get more info/help on a third party plugin - mvn help:describe -Dplugin=org.apache.maven.plugins:maven-release-plugin -Ddetail=true

There are 2 different ways to set the properties for a plugin

1) Through command like argument - 
run help describe command as above and copy the property to be set.
mvn compiler:compile -Dmaven.compiler.verbose=true

2) Set the property through pom.xml file
One advantage of this approach is that they will be applied when we invoke the plugin goal directly OR when the goal is invoked by a lifecycle phase. This is a better approach.
After setting this property just execute - mvn compile

Custom plugin 
-------------
Navigate to the workspace directory and execute the command -
mvn archetype:generate -DgroupId=com.learning.build -DartifactId=first-custom-plugin -DarchetypeArtifactId=maven-archetype-mojo -DarchetypeGroupId=org.apache.maven.archetypes
after the above command completes, execute - mvn eclipse:eclipse
Then import the new project into the workspace.
mvn install - to make this project available inside the local repo for any other project requiring this plugin.


There are 2 ways to execute this plugin
1) Command line
To test the plugin - in the terminal go to maven-manually-generated project and run the command - mvn com.learning.build:first-custom-plugin:touch 
This will demonstrate how this plugin ran against the maven-manually-generated project. in maven-manually-generated project navigate to target directory and check for touch.txt file.

2) Adding the plugin to maven-manually-generated pom file
add the details to the pom of the plugin and run mvn install to make sure the latest changes are available to other projects.
way to run custom plugin is - navigate to maven-manually-generated project and execute - mvn fCustom:touch

Plugin Details
--------------
clean - can be used as "mvn clean" OR "mvn clean:clean"
jar - plugin gets called from "package" plugin "mvn package" But it can be invoked separately as well.
To force create a new jar from scratch - mvn jar:jar -Djar.finalName=test -Djar.forceCreation=true
Like all other plugins even jar plugin can be invoked from either command line OR pom file.
javadoc - mvn javadoc:javadoc
for customization through pom file refer to the pom file of maven-manually-generated project pom file
install and deploy - these 2 plugins help us distribute the maven artifacts we have built
install - takes the artifact we have built and installs it to our local repo. Once in the local repo other maven projects can depend on that artifact. In order to install our project,
we always need to compile our project and package it.
deploy - there are 2 types of repositories - local and remote.
deploy plugin is supposed to take our artifact and deploy it to a remote repositories. deploy plugin and deploy goal will ship out our artifact to one of those remote repositories.


surefire plugin - this plugin is used to run tests. 
command line argument to skip unit tests - mvn install -Dmaven.test.skip=true

web - I created webapp project manually 
1) mvn archetype:generate
2) maven-archetype-webapp. Maven filters based on the condition I provide. Choose #1
3) stereotype - same for all projects std input
4) mvn eclipse:eclipse
5) Import the project into the workspace
One way to build this project is "mvn package" OR "mvn war:war"

mvn dependency:tree - lists the dependency in the tree format

archetype plugin
----------------
Creating projects from custom archetype - 
1) run "mvn archetype:generate"
2) select Teacher's archetype - spring-data-basic - this builds the project base for all the jpa projects
3) run "mvn eclipse:eclipse" and then import into the eclipse workspace.
4) run a sample test by commenting application-context.xml and enabling test-context.xml
Ex - maven-spring-basic-demo project. This project is not checked in as I didn't make any changes.

For Creating custom archetype 
------------------------------
1) From inside of the project run - mvn archetype:create-from-project. This will generate all the required files to - target/generated-sources/archetype
2) in the terminal navigate to target/generated-soures/archetype and run "mvn install". This will make this archetype available in the local repo for use
3) Now to test - go to workspace in the terminal. run "mvn archetype:generate" then select the artifactId you provided to the archetype project and other steps select default values.
Once the above process is complete navigate to the project created above and run "mvn eclispe:eclipse". Then import the project into the workspace and notice that the files and pom.xml in 
the new project.
<packaging>maven-archetype</packaging> - it gives some clues to maven when we want to build/install this arcchetype

Multi Module Project
--------------------
<packaging>pom</packaging> - indicates that the project will have only configuration and no source code.
What I did - Create a project

deploying to Tomcat through maven
---------------------------------
1) Edit the file tomcat-users.xml at the path - /Users/ac-rekharokkam/Applications/apache-tomcat-8.5.11/conf to add user and role . Refer to the file for user "tomcat" and role="manager-gui"
2) edit the file settings.xml at the path - /Users/ac-rekharokkam/Applications/apache-maven-3.5.0/conf
I added a new <server> element. look for the comments "<!-- Added by me for tomcat deployment Starts here -->" in the file for more info
3) with in the pom file of "maven-webapp-demo" project add detials for tomcat deployment - 
4) To deploy the web application run "mvn tomcat7:deploy"
5) Start tomcat and start using the app in the browser - http://localhost:8080/

Encrypt passwords
-----------------

"mvn -emp test" - this command will generate an encrypted master password of text "test". run this command from inside of the maven-webapp-demo
Create a new xml file "settings-security.xml" at /Users/ac-rekharokkam/.m2
add the encrypted master password for "test" into the above file and save.
From inside of the same project "maven-webapp-demo" run "mvn -ep s3cret". Copy the new encrypted password and edit the settings.xml at the path - /Users/ac-rekharokkam/Applications/apache-maven-3.5.0/conf
add the encrypted password generated for tomcat password s3cret.
Undeploy the app "mvn tomcat7:undeploy" and deploy again "mvn tomcat7:deploy". Can also use "mvn tomcat7:redeploy"

properties
----------
For how to use custom properties refer to the projects - maven-parent and maven-test-inheritance
In dragonfly project as well all the version numbers are set as custom properties in the parent pom file. All children pom files use these properties to configure the version numbers of
dependencies

For project property, environment property and java property refer to maven-webapp-demo.
to test project property, environment property run "mvn package". To test environment property run "mvn site"

Debugging
---------
mvn -help = lists all the options available for running mvn command
mvn -v = displays the version of maven along with other useful information like the maven installed path 
mvn compile:help = each plugin will also have a help goal that can provide more information on the plugin, different goals available on the plugin, etc
mvn -q compile = -q option means quiet without any printouts
mvn -X compile = -X prints a verobose output

M2E plugin
----------
To check what all softwares are installed along with our IDE Help -> Search/About.
m2e-demo = project built skipping archetype.
m2e-webapp-demo = project built with webapp archetype - maven-archetype-webapp - refer to the project m2e-webapp-demo created using this plugin
mvn help:effective-pom is same as the tab "Effective POM" on any of the pom.xml file.

When eclipse is newly configured/downloaded then sometimes we may not be able to see any dependency auto populated, for these issues fix is 
go to the Menu "Spring Tool Suite" -> preferences -> Maven = "Download repository index updates on startup". then restart eclipse

Importing projects
------------------
Maven projects created from command line can be imported into eclipse in 2 ways - 1) import existing projects 2) Import existing maven projects.
When I tried to import a webapp project created using "maven-archetype-webapp" archetype [either m2e plugin OR command Line] as Maven project i had issues - "Description	Resource	Path	Location	Type
The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path	index.jsp	/m2e-webapp-demo/src/main/webapp	line 1	JSP Problem". Workaround for this issue is to
add tomcat as the targeted runtime -> properties, Targeted Runtimes, Apache Tomcat. Even if you check the project facets it will have several facets it will be associated with multiple facets

Sometimes nothing is returned when we search for a dependent jar file even though it exists - go to the .metadata folder of the workspace, then to .plugins, then to org.eclipse.m2e.core,
nexus. There will be a bunch of folders whose names are somewhat hashed names, delete all these folders.

Now if you import any project created using "maven-archetype-webapp" archetype [either m2e plugin OR command Line] as existing project into workspace then no issues as 
there is no project facet associated with this import.

Running a project
------------------
To run a project -> Select the project -> Run As -> maven clean / maven install / maven ...
To add a custom maven goal -> Select the project -> Run As -> maven build and add a custom goal/s = compiler:compiler, compile package, clean compile package. Refer to the run-as configuration
"m2e-demo-maven-build-custom-goal" on m2e-demo project

Adding a third party plugin through m2e eclipse plugin
------------------------------------------------------
Select the project -> right click-> maven -> Add plugin -> search for "maven-release-plugin" -> click ok and check the pom.xml for an updated <build>section.
Select the project -> Run As -> maven build -> add a goal from the above plugin -> release:update-versions. When this goal is run check pom.xml file. <version> tag gets a bump-up.
Refer to the runas configuration "m2e-demo-maven-build-third-party-plugin-goal" on m2e-demo project


Difference between <dependencyManagement> and <dependencies> outside of <dependencyManagement> in the parent pom file - "maven-parent" and "mvn-test-inheritance"
---------------------------------------------------------------------------------------------------------------------
Any dependency mentioned directly under <dependencies> in the parent pom is inherited by all the children without choice. ex-org.apache.commons in parent pom file
Dependencies mentioned inside of <dependencyManagement> is optional for the children. If any child needs to use it then child pom should mention that dependency 
under <dependencies> element - just add artifactId and groupId without version and exclusions. In this case version and exclusions are specified by the parent pom.
Ex - log4j in the parent pom






